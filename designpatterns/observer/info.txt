Observer pattern is one of the behavioral design pattern. Observer design pattern is useful when you are interested in the 
state of an object and want to get notified whenever there is any change. In observer pattern, the object that watch on the 
state of another object are called Observer and the object that is being watched is called Subject. According to GoF, 
observer pattern intent is;

    Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified 
    and updated automatically.

Subject contains a list of observers to notify of any change in it’s state, so it should provide methods using which 
observers can register and unregister themselves. Subject also contain a method to notify all the observers of any change 
and either it can send the update while notifying the observer or it can provide another method to get the update.

Java Message Service (JMS) uses Observer pattern along with Mediator pattern to allow applications to subscribe and publish 
data to other applications.

Model-View-Controller (MVC) frameworks also use Observer pattern where Model is the Subject and Views are observers 
that can register to get notified of any change to the model.